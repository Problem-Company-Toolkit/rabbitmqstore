// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_rabbitmqstore is a generated GoMock package.
package mock_rabbitmqstore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rabbitmqstore "github.com/problem-company-toolkit/rabbitmqstore"
	amqp091_go "github.com/rabbitmq/amqp091-go"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CloseAll mocks base method.
func (m *MockStore) CloseAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAll indicates an expected call of CloseAll.
func (mr *MockStoreMockRecorder) CloseAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAll", reflect.TypeOf((*MockStore)(nil).CloseAll))
}

// CloseListener mocks base method.
func (m *MockStore) CloseListener(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseListener", id)
}

// CloseListener indicates an expected call of CloseListener.
func (mr *MockStoreMockRecorder) CloseListener(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseListener", reflect.TypeOf((*MockStore)(nil).CloseListener), id)
}

// DeclareExchanges mocks base method.
func (m *MockStore) DeclareExchanges(arg0 []rabbitmqstore.DeclareExchangeOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclareExchanges", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclareExchanges indicates an expected call of DeclareExchanges.
func (mr *MockStoreMockRecorder) DeclareExchanges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclareExchanges", reflect.TypeOf((*MockStore)(nil).DeclareExchanges), arg0)
}

// GetChannel mocks base method.
func (m *MockStore) GetChannel() *amqp091_go.Channel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel")
	ret0, _ := ret[0].(*amqp091_go.Channel)
	return ret0
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockStoreMockRecorder) GetChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockStore)(nil).GetChannel))
}

// GetListeners mocks base method.
func (m *MockStore) GetListeners() map[string]rabbitmqstore.Listener {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListeners")
	ret0, _ := ret[0].(map[string]rabbitmqstore.Listener)
	return ret0
}

// GetListeners indicates an expected call of GetListeners.
func (mr *MockStoreMockRecorder) GetListeners() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListeners", reflect.TypeOf((*MockStore)(nil).GetListeners))
}

// Publish mocks base method.
func (m *MockStore) Publish(arg0 rabbitmqstore.PublishOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockStoreMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockStore)(nil).Publish), arg0)
}

// RegisterListener mocks base method.
func (m *MockStore) RegisterListener(arg0 rabbitmqstore.RegisterListenerOpts) (rabbitmqstore.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterListener", arg0)
	ret0, _ := ret[0].(rabbitmqstore.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterListener indicates an expected call of RegisterListener.
func (mr *MockStoreMockRecorder) RegisterListener(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterListener", reflect.TypeOf((*MockStore)(nil).RegisterListener), arg0)
}
