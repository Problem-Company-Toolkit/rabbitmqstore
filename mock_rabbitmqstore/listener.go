// Code generated by MockGen. DO NOT EDIT.
// Source: listener.go

// Package mock_rabbitmqstore is a generated GoMock package.
package mock_rabbitmqstore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rabbitmqstore "github.com/problem-company-toolkit/rabbitmqstore"
)

// MockListener is a mock of Listener interface.
type MockListener struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder
}

// MockListenerMockRecorder is the mock recorder for MockListener.
type MockListenerMockRecorder struct {
	mock *MockListener
}

// NewMockListener creates a new mock instance.
func NewMockListener(ctrl *gomock.Controller) *MockListener {
	mock := &MockListener{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListener) EXPECT() *MockListenerMockRecorder {
	return m.recorder
}

// GetBindingKey mocks base method.
func (m *MockListener) GetBindingKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBindingKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBindingKey indicates an expected call of GetBindingKey.
func (mr *MockListenerMockRecorder) GetBindingKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBindingKey", reflect.TypeOf((*MockListener)(nil).GetBindingKey))
}

// GetExchange mocks base method.
func (m *MockListener) GetExchange() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchange")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExchange indicates an expected call of GetExchange.
func (mr *MockListenerMockRecorder) GetExchange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchange", reflect.TypeOf((*MockListener)(nil).GetExchange))
}

// GetExchangeType mocks base method.
func (m *MockListener) GetExchangeType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExchangeType indicates an expected call of GetExchangeType.
func (mr *MockListenerMockRecorder) GetExchangeType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeType", reflect.TypeOf((*MockListener)(nil).GetExchangeType))
}

// GetID mocks base method.
func (m *MockListener) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockListenerMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockListener)(nil).GetID))
}

// GetQueueName mocks base method.
func (m *MockListener) GetQueueName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQueueName indicates an expected call of GetQueueName.
func (mr *MockListenerMockRecorder) GetQueueName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueName", reflect.TypeOf((*MockListener)(nil).GetQueueName))
}

// UpdateHandler mocks base method.
func (m *MockListener) UpdateHandler(arg0 rabbitmqstore.ListenerHandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateHandler", arg0)
}

// UpdateHandler indicates an expected call of UpdateHandler.
func (mr *MockListenerMockRecorder) UpdateHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHandler", reflect.TypeOf((*MockListener)(nil).UpdateHandler), arg0)
}
